{"version":3,"sources":["scripts/main.js"],"names":["gameScoreBoard","document","querySelector","controlsButton","messageStart","messageWin","messageLose","getRandomInt","min","max","Math","floor","random","initMatrix","size","Array","map","fill","getTransposedMatrix","matrix","transposed","i","length","j","temp","getElementsMatrix","elementsMatrix","rows","querySelectorAll","row","elementsRow","cells","cell","push","startGame","SIZE","elements","gameScore","renderNumber","num","className","textContent","renderNumbers","addNewNumbers","newNumber","getMergedLine","line","merged","filter","el","splice","isLose","flat","some","canMerged","addEventListener","keydownEvent","e","stateBefore","JSON","stringify","key","mergeLeft","reverse","mergeRight","transposedCells","mergeUp","mergeDown","classList","remove","removeEventListener","app","target","add"],"mappings":"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","file":"main.cfc7afe9.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst gameScoreBoard = document.querySelector('.game-score');\nconst controlsButton = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst initMatrix = (size) => {\n  return [...Array(size)].map(() => [...Array(size)].fill(0));\n};\n\nconst getTransposedMatrix = (matrix) => {\n  const transposed = [...matrix];\n\n  for (let i = 0; i < transposed.length; i++) {\n    for (let j = 0; j < i; j++) {\n      const temp = transposed[i][j];\n\n      transposed[i][j] = transposed[j][i];\n      transposed[j][i] = temp;\n    }\n  }\n\n  return transposed;\n};\n\nconst getElementsMatrix = () => {\n  const elementsMatrix = [];\n  const rows = document.querySelectorAll('.field-row');\n\n  for (const row of rows) {\n    const elementsRow = [];\n    const cells = row.querySelectorAll('.field-cell');\n\n    for (const cell of cells) {\n      elementsRow.push(cell);\n    }\n\n    elementsMatrix.push(elementsRow);\n  }\n\n  return elementsMatrix;\n};\n\nconst startGame = () => {\n  const SIZE = 4;\n  const NUMBER_TO_WIN = 2048;\n  const elements = getElementsMatrix();\n  let cells = initMatrix(SIZE);\n  let gameScore = 0;\n\n  const renderNumber = (num, row, cell) => {\n    elements[row][cell].className = `field-cell field-cell--${num}`;\n    elements[row][cell].textContent = num;\n  };\n\n  const renderNumbers = () => {\n    for (let i = 0; i < elements.length; i++) {\n      for (let j = 0; j < elements.length; j++) {\n        if (cells[i][j]) {\n          renderNumber(cells[i][j], i, j);\n          continue;\n        }\n\n        elements[i][j].className = 'field-cell';\n        elements[i][j].textContent = '';\n      }\n    }\n  };\n\n  const addNewNumbers = () => {\n    while (true) {\n      const row = getRandomInt(0, SIZE - 1);\n      const cell = getRandomInt(0, SIZE - 1);\n\n      if (cells[row][cell] === 0) {\n        const newNumber = Math.random() < 0.1 ? 4 : 2;\n\n        cells[row][cell] = newNumber;\n        renderNumber(newNumber, row, cell);\n\n        return;\n      }\n    }\n  };\n\n  const getMergedLine = (line) => {\n    const merged = line.filter((el) => el);\n\n    for (let i = 0; i < merged.length - 1; i++) {\n      if (merged[i] === merged[i + 1]) {\n        merged[i] = 2 * merged[i];\n        merged.splice(i + 1, 1);\n        gameScore += merged[i];\n      }\n    }\n\n    return [...merged, ...Array(SIZE - merged.length).fill(0)];\n  };\n\n  const mergeLeft = () => {\n    for (let i = 0; i < SIZE; i++) {\n      const line = cells[i];\n\n      cells[i] = getMergedLine(line);\n    }\n  };\n\n  const mergeRight = () => {\n    for (let i = 0; i < SIZE; i++) {\n      const line = cells[i].reverse();\n\n      cells[i] = getMergedLine(line).reverse();\n    }\n  };\n\n  const mergeUp = () => {\n    const transposedCells = getTransposedMatrix(cells);\n\n    for (let i = 0; i < SIZE; i++) {\n      const line = transposedCells[i];\n\n      transposedCells[i] = getMergedLine(line);\n    }\n\n    cells = getTransposedMatrix(transposedCells);\n  };\n\n  const mergeDown = () => {\n    const transposedCells = getTransposedMatrix(cells);\n\n    for (let i = 0; i < SIZE; i++) {\n      const line = transposedCells[i].reverse();\n\n      transposedCells[i] = getMergedLine(line).reverse();\n    }\n\n    cells = getTransposedMatrix(transposedCells);\n  };\n\n  const isWon = () => {\n    return cells.flat().some((el) => el === NUMBER_TO_WIN);\n  };\n\n  const hasEmptyCells = () => cells.flat().some((el) => !el);\n\n  const canMerged = () => {\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (j + 1 < SIZE && cells[i][j] === cells[i][j + 1]) {\n          return true;\n        }\n\n        if (i + 1 < SIZE && cells[i][j] === cells[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  const isLose = () => {\n    return !hasEmptyCells() && !canMerged();\n  };\n\n  const keydownEvent = (e) => {\n    const stateBefore = JSON.stringify(cells);\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        mergeLeft();\n        break;\n      case 'ArrowRight':\n        mergeRight();\n        break;\n      case 'ArrowUp':\n        mergeUp();\n        break;\n      case 'ArrowDown':\n        mergeDown();\n        break;\n    }\n\n    const stateAfter = JSON.stringify(cells);\n\n    if (stateBefore !== stateAfter) {\n      renderNumbers();\n      addNewNumbers();\n      gameScoreBoard.textContent = gameScore;\n    }\n\n    if (isWon()) {\n      messageWin.classList.remove('hidden');\n    }\n\n    if (isLose()) {\n      messageLose.classList.remove('hidden');\n      document.removeEventListener('keydown', keydownEvent);\n    }\n  };\n\n  renderNumbers();\n\n  for (let i = 0; i < 2; i++) {\n    addNewNumbers();\n  }\n\n  document.addEventListener('keydown', keydownEvent);\n};\n\nconst app = () => {\n  controlsButton.addEventListener('click', (e) => {\n    e.target.classList.remove('start');\n    e.target.classList.add('restart');\n    e.target.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    startGame();\n  });\n};\n\napp();\n"]}